import type { PermissionString, Snowflake } from 'discord.js';
import type Bot from './Bot';
import type * as Ctx from './Ctx';
export { default as Bot } from './Bot';
export * as Ctx from './Ctx';
declare type CtxArg = Ctx.Text | Ctx.Button | Ctx.SelectMenu | Ctx.Slash;
export declare type EventListener = (ctx: CtxArg) => void;
export declare type EventDecorator = ((bot: Bot, listenerName: string) => EventListener) & {
    checker: (ctx: CtxArg) => boolean;
};
export declare const checkAny: (...conditions: Array<EventDecorator>) => (bot: Bot, listenerName: string) => void;
export declare const check: (checker: (ctx: CtxArg) => boolean) => EventDecorator;
export declare const hasRole: (roleResolvable: Snowflake | string) => EventDecorator;
export declare const hasAnyRole: (...roleResolvables: Array<Snowflake | string>) => ReturnType<typeof checkAny>;
export declare const botHasRole: (roleResolvable: Snowflake | string) => EventDecorator;
export declare const botHasAnyRole: (...roleResolvables: Array<Snowflake | string>) => ReturnType<typeof checkAny>;
export declare const hasChannelPermissions: (...permissions: Array<PermissionString | bigint>) => EventDecorator;
export declare const hasGuildPermissions: (...permissions: Array<PermissionString | bigint>) => EventDecorator;
export declare const botHasChannelPermissions: (...permissions: Array<PermissionString | bigint>) => EventDecorator;
export declare const botHasGuildPermissions: (...permissions: Array<PermissionString | bigint>) => EventDecorator;
export declare const guildOnly: () => EventDecorator;
export declare const dmOnly: () => EventDecorator;
export declare const isOwner: () => EventDecorator;
export declare const isNsfw: () => EventDecorator;
